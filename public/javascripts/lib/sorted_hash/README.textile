h1. SortedHash data structure for JavaScript

Provides a simple layer of abstraction for managing Sorted Hashes in JavaScript.

h2. Insertion

<pre>
<code>
  var items = new SortedHash();
  items.set("at", "Austria");
  items.set("de", "Germany");
</code>
</pre>


h2. Access

h3. Hash Semantics

<pre>
<code>
  items.get("at") // => "Austria";
  items.get("de") // => "Germany";
</code>
</pre>

h3. Array Semantics

<pre>
<code>
  items.at(0); // => "Austria"
  items.at(1); // => "Germany"
  items.length; // => 2
</code>
</pre>

h2. Iteration

h3. each

<pre>
<code>
  items.each(function(index, value) {
    value; // => 'Austria', 'Germany'
    index; // => 0, 1
  });
</code>
</pre>

h3. eachKey

<pre>
<code>
  items.eachKey(function(key, value) {
    value; // => 'Austria', 'Germany'
    key; // => 'at', 'de'
  });
</code>
</pre>


h2. Operations


h3. sort

<pre>
<code>
  var descendingOrder = function(item1, item2) {
        return item1 === item2 ? 0 : (item1 > item2 ? -1 : 1);
      },
      sortedItems;
  
  // Returns a SortedHash in descending order
  // while the original SortedHash remains untouched
  sortedItems = items.sort(descendingOrder); 
</code>
</pre>


h3. map

<pre>
<code>
  var mappedItems = items.map(function (item) {
    return item.slice(0, 3);
  });
  
  // leave original SortedHash untouched
  mappedItems.at(0) // => 'Aus';
  mappedItems.at(1) // => 'Ger';
</code>
</pre>


h3. select

<pre>
<code>
  var selectedItems = items.select(function (key, i) {
        return i === 'Austria';
      });

  selectedItems.at(0) // => 'Austria';
  selectedItems.length; // => 1;

</code>
</pre>

h3. intersect

<pre>
<code>
  var items2 = new SortedHash(),
      intersectedItems;
  
  items2.set('fr', 'France');
  items2.set('at', 'Austria');
  
  intersectedItems = items.intersect(items2);
  
  intersectedItems.length; // => 1
  intersectedItems.get('at'); // => 'Austria'
</code>
</pre>


h3. union

<pre>
<code>
  var items2 = new SortedHash(),
      unitedItems;
  
  items2.set('fr', 'France');
  items2.set('at', 'Austria');
  
  intersectedItems = items.intersect(items2);
  
  unitedItems.length; // => 3
  unitedItems.get('at'); // => 'Austria'
  unitedItems.get('de'); // => 'Germany'
  unitedItems.get('fr'); // => 'France'
</code>
</pre>


h2. Method chaining

<pre>
<code>
  var mappedAndSortedItems = items.map(function (item) {
        return item.slice(0, 3);
      })
      .sort(descendingOrder);

  selectedItems.at(0) // => 'Ger';
  selectedItems.at(2) // => 'Aus';
</code>
</pre>

h2. Testsuite

* 60 / 60 tests passing
